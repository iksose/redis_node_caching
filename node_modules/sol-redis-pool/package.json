{
  "name": "sol-redis-pool",
  "description": "Generic resource pooling for Node.JS",
  "version": "0.1.3",
  "author": {
    "name": "Joshua Heiks",
    "email": "joshuaheiks@gmail.com"
  },
  "keywords": [
    "pool",
    "redis"
  ],
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/joshuah/sol-redis-pool.git"
  },
  "dependencies": {
    "generic-pool": "*",
    "redis": "*"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "readme": "sol-redis-pool\n==============\n\nA simple Redis pool for node using generic-pool. There are two example included. See example1.js for a demo.\n\n### Install\n\n    npm install sol-redis-pool\n    \n### Example\n\n    // Example 1: Using the acquireHelper.\n    // Our Settings\n    options = {\n      redis_host: '127.0.0.1',\n      redis_port: 6379,\n    }\n        \n    var RedisPool = require('./index');\n    var pool = new RedisPool(options);\n    \n    // Handle the error here...\n    function errorCallback(err) {}\n    \n    function clientCallback(client) {\n      // Use the client then release it back to the pool.\n      client.ping(function(err, result) {\n    \tconsole.log(err, result);\n    \t// Release the client...\n\t    pool.release(client);\n\t\t// Drain the pool so the example will end.\n\t\tpool.drain(function(){\n\t\t\tconsole.log('Done...');\n\t\t});\n      })\n    }\n    console.log(\"If everything is working, you should see 'null 'PONG'.\")\n    pool.acquireHelper(errorCallback, clientCallback);\n\nThe output should be:\n\n    If everything is working you should see 'null 'PONG'.\n    null 'PONG'\n\n## Methods\n\n### acquire(callback)\nAcquires a redis client from the pool. The callback is passed an **err** and **client**. The **client** object is a normal redis client. Make sure you release the **client** using the .release(client) method when you are done.\n\n### release(client)\nThis method will release your client object back into the pool.\n\n### acquireHelper(errorCallback, clientCallback)\nThis method accepts two callbacks. The error callback is called if the pool\ncannot return a client. `errorCallback(err)`. The clientCallback(client) returns the redis client connection. Note: You still need to **release** the client object.\n\n### Drain(Pool, callback)\nThis method will drain the connection pool completely and execute the callback when finished. You should call this when you want to close your application. If you do not your application will continue to run forever.\n\nThe Pool argument should be your *Pool* object.\n\n## Adjusting Pool Settings.\nCombine any the settings you may need into one global named settings.\n\n    options = {\n      redis_host: '127.0.0.1',\n      redis_port: 6379,\n      redis_options: {},\n      password: 'dingbats'\n      max_clients: 10,\n      min_clients: 2,\n      reapIntervalMillis: 5000,\n      idleTimeoutMillis: 30000,\n      logging: true\n    }\n\n## Redis Options\n \n### Redis Server and Port\n\n    options = {\n      redis_port: 6379,\n      redis_host: '127.0.0.1'\n    }\n\nThe default settings are port `6379` and `127.0.0.1`.\n\n### Redis Server using a Unix Socket\n    options = {\n      unix_socket: '/tmp/redis.sock'\n    }\n\n### Additional Redis Options\nYou can pass any *options* you normally would pass to the **redis.createClient()** function in `node-redis`. See the [node-redis documentation](https://github.com/mranney/node_redis#rediscreateclientport-host-options) for more information.\n\n    options = {\n       redis_options: redisoptionsâ€¦\n    }\n\n### Authentication \nRight now you have several options when authenticating. The example is how you should authenticate going forward. I will remove support for\nsetting `options.password`, `options.redis_password` and `options.auth_pass` at the 0.2 release.\n\n    options = {\n        redis_options: {auth_pass: 'dingbats'}\n    }\n\n## Generic Pool Options\nThese options are used to control the **generic-pool**. You will normally not need to use any of these options.\n\n### Number of Clients\nOptional minimum and maximum clients to have ready in the pool. The default values are 10 for the maximum and 2 for the minimum.\n\n    options = {\n       max_clients: 10,\n       min_clients: 5\n    }\n\n\n### Generic Pool - Timeouts\nYou can adjust the **generic-pool** *reapIntervalMillis* and *idleTimeoutMillis*.\n\n    options = {\n       reapIntervalMillis: 5000,\n       idleTimeoutMillis: 30000\n    }\n\n\n### Logging\nIf you would like to see what the *generic-pool* module is doing your can enable console logging by setting *logging* to `true`. This feature is off by default.\n\n    options = {\n      logging: true\n    }\n\n## Changes\n* 2013-09-16 [0.1.3] - Fixed a bug in how authentication is handled. Updated the documentation to reflect changes.\n* 2013-03-06 - Added Unix socket support by setting the `unix_socket` option. ",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joshuah/sol-redis-pool/issues"
  },
  "homepage": "https://github.com/joshuah/sol-redis-pool",
  "_id": "sol-redis-pool@0.1.3",
  "dist": {
    "shasum": "d3ba24a43c9f10e1c67f28e773839a7f50edd9b8"
  },
  "_from": "sol-redis-pool@",
  "_resolved": "https://registry.npmjs.org/sol-redis-pool/-/sol-redis-pool-0.1.3.tgz"
}
